#!/bin/bash
# Script di riavvio delle applicazioni Jee
# Autori dsestero@invalle.it | bmolino@invallee.it
# Jee2011

PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"

VALID_INSTANCES=$(cat ~jboss/bin/jboss-instance-list.conf)

START_MEM_USED=$(df -h -P|grep "opt"|awk '{print $3}')
START_MEM_AVAIL=$(df -h -P|grep "opt"|awk '{print $4}')
START_USED_PERC=$(df -h -P|grep "opt"|awk '{print $5}')

# Codici di uscita per errore
E_PARAMERR=1

# escape sequences
bold=`tput bold`
normal=`tput sgr0`

function usage()
{
        echo "${bold}Uso: manage-jboss-instance <instance-name|all> <start|stop|restart|status> [d] [r]${normal}"
        echo "dove: <instance-name> è il nome dell'istanza (vedi wiki) oppure 'all' per lavorare su tutte"
        echo "      ${bold}start${normal}, ${bold}stop${normal}, ${bold}restart${normal} o ${bold}status${normal} è il comando desiderato"
        echo "      ${bold}d${normal}, valido solo per i comandi stop e restart, cancella le cartelle tmp e work dell'istanza/e"
        echo "      ${bold}r${normal}, valido solo se in cancellazione, mostra un report con l'indicazione statistica sullo spazio su disco"
        exit $E_PARAMERR
}

function get_destination()
{
    if [[ -d "/opt/jboss/server/${1}" ]]; then
        DESTINATION="/opt/jboss/server/${1}"
        if [[ "$1" == "studenti" ]]; then
                DESTINATION=/opt/jboss-4.2.3.GA/server/default
        elif [[ ! -d $DESTINATION ]]; then
            DESTINATION=/opt/jboss-8-$1/wildfly-8.2.0.Final/standalone
        fi
    fi
}

function status()
{
	PIDS=$(ps -ef|grep $1|egrep '(java)|(bin/run)'|awk '{print $2}')
	if [[ "x$PIDS" == "x" ]]; then
                echo "JBoss instance $1 is NOT running"
                STATUS=3
        else 
                echo "JBoss instance $1 is running with PIDs: $(echo $PIDS)"
                STATUS=0
        fi
        return $STATUS
}

function delete_cache()
{
	if [[ $2 == "si" ]]; then
		echo -n "Cancello la cache e il log jboss_out.log del servizio '$1' di JBoss..."
		get_destination $1
		sudo su -c "rm -rf $DESTINATION/tmp" jboss
#        sudo su -c "rm -rf $DESTINATION/work" jboss
		sudo su -c "cat /dev/null > /var/log/jboss/server/$1/jboss_out.log" jboss
		echo " [fatto]"
	fi
}

function start_instance()
{
       	sudo service jboss-$1 start
       	echo "Avviato servizio '$1' di JBoss"
}

function stop_instance()
{
        sudo service jboss-$1 stop
        echo -n "Attendo per massimo 3 minuti l'arresto naturale di JBoss"
        for i in `seq 1 18`;
        do
                PIDS=$(ps -ef|grep $1|egrep '(bin/java)|(jboss/bin/run)'|awk '{print $2}')
                if [ "x$PIDS" != "x" ]; then
	                echo -n "."
	                sleep 10
	        else
	                break
	        fi
        done
        echo ""
       	PIDS=$(ps -ef|grep $1|egrep '(bin/java)|(jboss/bin/run)'|awk '{print $2}')
        if [ "x$PIDS" != "x" ]; then
        	echo "Effettuo kill -9 $(echo $PIDS)"
        	sudo su -c "kill -9 $(echo $PIDS)" jboss
        fi
	echo
        echo "Fermato servizio '$1' di JBoss"
}

function do_task()
{
	if !(echo "$VALID_INSTANCES" | grep -q "$1")
	then
		echo "Bad instance: '$1'"
		exit $PARAMERR
	fi

        if [[ "stop" == $2 ]]; then
                stop_instance $1
				delete_cache $1 $3
	elif [[ "start" == $2 ]]; then
	        start_instance $1
        elif [[ "restart" == $2 ]]; then
                stop_instance $1
                delete_cache $1 $3
                start_instance $1
        elif [[ "status" == $2 ]]; then
                status $1
                exit $?
        fi
}

function report()
{
	# data
	local NOW=$(date +"%d-%m-%Y")
	# Size - spazio totale (in G)
	local MEM_SIZE=$(df -h -P|grep "/opt"|awk '{print $2}')
	# Used - spazio utilizzato in (in G)
	local MEM_USED=$(df -h -P|grep "/opt"|awk '{print $3}')
	# Avail - spazio disponibile in (in G)
	local MEM_AVAIL=$(df -h -P|grep "/opt"|awk '{print $4}')
	# Use% - percentuale spazio disponibile sul totale
	local USED_PERC=$(df -h -P|grep "/opt"|awk '{print $5}')
	local TESTD="*====================================================================*"
	local TESTT="|                                    report generated by jee@2011-13 |"
	local SPACE=""

	echo
	echo "Report utilizzo dello spazio su file system disk /opt e /var ($NOW):"
	echo "$TESTD"
	echo "$TESTT"
	echo "$TESTD"
	echo "spazio totale /opt ----------> $MEM_SIZE"
	echo "$SPACE"
	echo "spazio disponibile iniziale -> $2"
	echo "% spazio utilizzato ---------> $3"
	echo "$SPACE"
	echo "spazio disponibile finale ---> $MEM_AVAIL"
	echo "% spazio utilizzato ---------> $USED_PERC"
	echo "$SPACE"

	# nuovo report con riferimenti a /var/log/jboss
	local MEM_SIZE_VAR=$(df -h -P|grep "/var"|awk '{print $2}')
	local MEM_AVAIL_VAR=$(df -h -P|grep "/var"|awk '{print $4}')
	local USED_PERC_VAR=$(df -h -P|grep "/var"|awk '{print $5}')

	echo "Statistiche su '/var': ancora utilizzato $USED_PERC_VAR di $MEM_SIZE_VAR (disponibili $MEM_AVAIL_VAR)"
	echo "$SPACE"
}

################### Controlli preliminari ###################

INSTANCE=$1
COMMAND=$2
DELETE="no"
REPORT="no"

if [[ -n "$1" && ("help" == "$1") ]]
then
        usage
	exit
fi

if [ -z "$1" ]
then
	echo "Selezionare l'istanza di JBoss"
        OPTIONS="$VALID_INSTANCES all"
        select opt in $OPTIONS; do
                INSTANCE=$opt
                if [ -n "$INSTANCE" ] 
                then
                                break
                else    
                        echo "opzione non valida"
                fi  
        done
        
	echo "Vuoi cancellare la cache?"
        OPTIONS="si no"
        select opt in $OPTIONS; do
                DELETE=$opt
	        break
	done
fi

if [ -z "$2" ]
then
	echo "Selezionare il comando"
        OPTIONS="stop start restart status"
        select opt in $OPTIONS; do
                COMMAND=$opt
                if [ -n "$COMMAND" ] 
                then
                                break
                else    
                        echo "opzione non valida"
                fi  
        done
fi

if [[ -n "$3" && ("d" == "$3") ]]
then
       DELETE="si"
fi

if [[ -n "$4" && ("r" == "$4") ]]
then
	REPORT="si"
fi

################### Svolgimento del task ###################

if [[ "$INSTANCE" == "all" ]]; then

	echo "Sei sicuro di voler riavviare TUTTE le istanze?"
        OPTIONS="si no"
        select opt in $OPTIONS; do
                if [[ "$opt" == "si" ]]; then
                        break
		else
			exit
                fi  
        done

	if [[ "$DELETE" == "si" ]]; then

		echo "Sei sicuro di voler cancellare TUTTE le cache?"
        	OPTIONS="si no"
	        select opt in $OPTIONS; do
        	        DELETE=$opt
        	        break  
	        done
	fi

	for CURR_INST in $VALID_INSTANCES; do
		do_task $CURR_INST $COMMAND $DELETE
		echo
	done
else
	do_task $INSTANCE $COMMAND $DELETE
fi

if [[ "$REPORT" == "si" ]]; then
	report $START_MEM_USED $START_MEM_AVAIL $START_USED_PERC
fi

exit
